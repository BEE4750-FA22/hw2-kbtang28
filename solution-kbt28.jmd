---
title: "BEE 4750/5750 Homework 2"
author: "Katerina Tang (kbt28)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

```julia
using Plots
```

# Problem 1

## Problem 1.1
We'll model the DO concentration between Waste Source (WS) 1 and WS 2 (i.e., $0\leq x<15$) and after WS 2 (i.e., $x\geq 15$) separately as $C_1(x)$ and $C_2(x)$, respectively.
We're given $k_a,\ k_c,\ k_n,\ C_s,$ and $U$, so we have to determine the values of $C_0,\ N_0,$ and $B_0$ to calculate $C_1(x)$ and the values of $C_{15},\ N_{15},$ and $B_{15}$ to calculate $C_2(x)$.

From the table of DO, CBOD, and NBOD concentrations in the river inflow and waste streams, we get that

```math
\begin{align}
C_0 &= \frac{100,000*7.5+10,000*5}{100,000+10,000}\text{ mg/L}\\
B_0 &= \frac{100,000*5+10,000*50}{100,000+10,000}\text{ mg/L}\\
N_0 &= \frac{100,000*5+10,000*35}{100,000+10,000}\text{ mg/L}
\end{align}
```
and
``` math
\begin{align}
C_{15} &= \frac{110,000*C_1(15)+15,000*5}{110,000+15,000}\text{ mg/L}\\
B_{15} &= \frac{110,000*B_0\exp(-k_c(15/6))+45*15,000}{110,000+15,000}\text{ mg/L}\\
N_{15} &= \frac{110,000*N_0\exp(-k_n(15/6))+35*15,000}{110,000+15,000}\text{ mg/L}
\end{align}
```
So for $0\leq x<15,$ we model the DO concentration as
```math
C_1(x)=C_s(1-\alpha_1)+C_0\alpha_1+B_0\alpha_2+N_0\alpha_3\text{ mg/L}
```
and for $x\geq 15,$ we model the DO concentration as
```math
C_2(x)=C_s(1-\alpha_1)+C_{15}\alpha_1+B_{15}\alpha_2+N_{15}\alpha_3\text{ mg/L}.
```

This is all done with the following functions.

```julia
function calc_mixed_concentration(V0, C0, V1, C1)
    return (V0 * C0 + V1 * C1)/(V0 + V1)
end

function calc_concentrations(x, C0, B0, N0)
    ka = 0.55
    kc = 0.35
    kn = 0.25
    Cs = 10
    U = 6

    α1 = exp(-ka*x / U)
    α2 = kc * (exp(-kc*x / U) - exp(-ka*x / U)) / (ka - kc)
    α3 = kn * (exp(-kn*x / U) - exp(-ka*x / U)) / (ka - kn)

    C = Cs*(1-α1) + C0*α1 - B0*α2 - N0*α3
    B = B0*exp(-kc*(x/U))
    N = N0*exp(-kn*(x/U))

    return C, B, N
end

function DO_simulation(E1 = 0, E2 = 0, max_dist = 50)
    C = zeros(max_dist + 1)
    B = zeros(max_dist + 1)
    N = zeros(max_dist + 1)

    C[1] = calc_mixed_concentration(1e5, 7.5, 1e4, 5)
    B[1] = calc_mixed_concentration(1e5, 5, 1e4, (1 - E1)*50)
    N[1] = calc_mixed_concentration(1e5, 5, 1e4, (1 - E1)*35)
    
    for x = 1:(max_dist)
        if x < 15
            C[x + 1], B[x + 1], N[x + 1] = calc_concentrations(x, C[1], B[1], N[1])
        elseif x == 15
            C[16] = calc_mixed_concentration(1.1e5, C[15], 1.5e4, 5)
            B[16] = calc_mixed_concentration(1.1e5, B[15], 1.5e4, (1 - E2)*45)
            N[16] = calc_mixed_concentration(1.1e5, N[15], 1.5e4, (1 - E2)*35)
        else
            C[x + 1], B[x + 1], N[x + 1] = calc_concentrations(x - 15, C[16], B[16], N[16])
        end
    end

    return C, B, N
end
```

Below is a plot of the DO concentration from WS 1 to 50km downstream assuming no treatment.

```julia
DO_conc, CBOD_conc, NBOD_conc = DO_simulation(0, 0, 50);
plot(0:50, DO_conc, yaxis=[3, 7.5], label=false, xlabel="Distance (km)", ylabel="DO concentration (mg/L)", linewidth=2);
vline!([0, 15], label="Waste discharge", linewidth=2)
```

## Problem 1.2
Using the results from Problem 1.1, the DO concentration recovers to 6 mg/L at about `j findfirst(DO_conc[16:51] .>= 6.0) - 1` km downstream from WS 2. At `j findfirst(DO_conc[16:51] .>= 6.0) - 2` km downstream from WS 2, the DO concentration is still just below 6 mg/L.

## Problem 1.3
We'll try different treatment plans for WS 2 and plot the resulting minimum DO concentration versus the treatment level.

```julia
test_E2s = 0:0.01:1.0;
min_DO_conc = zeros(length(test_E2s));
for i in 1:length(test_E2s)
    DO_conc, _, _ = DO_simulation(0, test_E2s[i], 50)
    min_DO_conc[i] = minimum(DO_conc[16:51])
end
plot(test_E2s, min_DO_conc, label=false, xlabel="WS 2 treatment level (% removal)", ylabel="Minimum DO concentration (mg/L)", linewidth=2);
hline!([4.0], label="Target", linewidth=2)
```

Assuming that WS 1 remains untreated, the minimum proportion of organic waste that we must remove at WS 2 to keep the minimum DO concentration above 4 mg/L is `j test_E2s[findfirst(min_DO_conc .>= 4.0)]`.

## Problem 1.4
We'll try different treatment levels for WS 1 and WS 2 and plot the resulting minimum DO concentration versus the treatment levels.

```julia
test_Es = 0:0.01:1.0;
min_DO_conc = zeros(length(test_Es));
for i in 1:length(test_Es)
    DO_conc, _, _ = DO_simulation(test_Es[i], test_Es[i], 50)
    min_DO_conc[i] = minimum(DO_conc[16:51])
end
plot(test_Es, min_DO_conc, label=false, xlabel="WS 2 treatment level (% removal)", ylabel="Minimum DO concentration (mg/L)", linewidth=2);
hline!([4.0], label="Target", linewidth=2)
```

Assuming that the treatment level is equal at both waste sources, the minimum proportion of organic waste that we must remove from WS 1 and WS 2 to keep the minimum DO concentration above 4 mg/L is `j test_Es[findfirst(min_DO_conc .>= 4.0)]`.

## Problem 1.5
It's hard to say whether I'd treat only WS 2 or treat WS 1 and WS 2 equally without more information.
On the one hand, it's the organic waste in WS 2 that pushes the DO concentration below the regulatory standard, so it might be easiest to treat only WS 2.
On the other hand, it's a bit unfair to enforce regulations only on WS 2 because WS 2 is downstream from WS 1; if WS 2 were upstream, they might not push the DO level below 4 mg/L.
I think for this reason, I'd decide to treat both waste streams equally.

In order to make a decision about a treatment plan, it might be helpful to have some information about the cost of treatment. 
It might also be easier to remove a little bit of organic waste from both waste streams or remove more waste from only one stream, in which case I'd definitely opt for treating both waste streams equally.

## Problem 1.6

## Problem 1.7

```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```

## Problem 1.8

```

# References